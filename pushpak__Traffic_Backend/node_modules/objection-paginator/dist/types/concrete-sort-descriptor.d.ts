import { ColumnType, SortDescriptor, SortDirection, ValidationFunction } from "./sort-descriptor.js";
import { Model, QueryBuilder } from "objection";
import { ValidationCase } from "./get-error-class.js";
/**
 * Represents a single sort descriptor in a user-specified sort.
 *
 * @remarks
 * This is an internal class that is created from user-specified sort
 * descriptors. It normalizes those descriptors and contains methods for
 * interacting with them.
 */
export declare class ConcreteSortDescriptor {
    /**
     * The column name to sort by.
     */
    column: string;
    /**
     * The type of the column, for validation purposes.
     */
    columnType: ColumnType;
    /**
     * Indicates whether or not thee column is nullable.
     */
    nullable: boolean;
    /**
     * The sort direction.
     */
    direction: SortDirection;
    /**
     * The dot-separated path to the cursor value in the last-fetched entity.
     */
    valuePath: string;
    /**
     * The custom validation function, if any was specified.
     */
    validate?: ValidationFunction;
    /**
     * Creates a ConcreteSortDescriptor.
     * @param descriptor - The user-specified sort descriptor.
     */
    constructor(descriptor: SortDescriptor | string);
    /**
     * Normalized sort order for non-null ORDER BY terms.
     */
    get order(): "asc" | "desc";
    /**
     * Normalized sort order for `is null` ORDER BY terms.
     */
    get nullOrder(): "asc" | "desc";
    /**
     * The inequality operator to use in a cursor filter for this column.
     */
    get operator(): ">" | "<";
    /**
     * Checks if a given cursor value matches the column type.
     *
     * @remarks
     * This method simply returns true or false based on the check. It will not
     * throw if the check fails.
     *
     * @param value - The value to check.
     * @returns `true` if the value matches, `false` otherwise.
     */
    checkCursorValue(value: any): boolean;
    /**
     * Validates a given cursor value against the descriptor.
     *
     * @remarks
     * This method will throw if the cursor is not valid. Which error class is
     * thrown will depend on the `validationCase` parameter which specifies
     * whether this validation is happening during cursor creation or cursor
     * consumption. The former indicates a problem with the sort configuation,
     * while the other indicates a cursor that was tampered with or transmitted
     * incorrectly.
     *
     * @param value - The value to validate.
     * @param validationCase - Indicates which error to throw on failure.
     * @returns The unmutated value.
     */
    validateCursorValue(value: any, validationCase: ValidationCase): any;
    /**
     * Gets the cursor value for this descriptor from the provided entity.
     *
     * @remarks
     * This method also validates the value while fetching it. It is used during
     * cursor creation only, so validation errors thrown here will be
     * ConfigurationErrors.
     *
     * @param entity - The entity from which to fetch the value.
     * @returns The fetched cursor value, or null if none was found.
     */
    getCursorValue(entity: object): any;
    /**
     * Gets the raw SQL identifier of the descriptor's column.
     *
     * @remarks
     * This is necessary due to Knex's lack of support for specifying the order
     * of nulls in its `orderBy` method. We have to use `orderByRaw` for any
     * query with a nullable sort descriptor, but `orderByRaw` breaks any
     * identifier mappers in place on the query builder.
     *
     * This method aims to invoke the provided query builder's mappers on the
     * descriptor's column, so that if any are present they will be applied to
     * the result of this function.
     *
     * This method does not change or invoke the provided query builder at all,
     * instead cloning it and doing its operations on the clone.
     *
     * @param qry - The query builder that may contain the needed mappers.
     * @returns The raw column identifier.
     */
    getRawColumn(qry: QueryBuilder<Model>): string;
}
